{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","Notification","message","className","nonExisting","id","date","axios","get","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteServices","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"sOAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,KCM3BI,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,I,gBCYQ,EAlBA,WACb,IAAME,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNR,WAAW,GAEb,OAAOS,IAAMC,IATC,cASYC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAOR,OAWnD,EARA,SAAAS,GACb,OAAON,IAAMO,KAbC,aAaaD,GAAWJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAOnD,EAJA,SAACN,EAAIQ,GAClB,OAAON,IAAMQ,IAAN,UAjBO,aAiBP,YAAwBV,GAAMQ,GAAWJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZtEK,G,MAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,wGAmFSC,EA/EH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,cAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KA0BrBC,qBAAU,WACRC,IAEGxB,MAAK,SAAAyB,GACJT,EAASS,QAEZ,IAEH,IAkBMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAMhE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcI,QAAS4B,IACvB,6BACE,4BAAQ9B,QAAS,kBAAK6B,GAAYD,KAAlC,QAAkDA,EAAU,YAAc,QAE5E,4BACGO,EAAYE,KAAI,SAAA1C,GAAI,OACnB,kBAAC,EAAD,CAAM2C,IAAK3C,EAAKU,GAAIV,KAAMA,EAAMC,iBAAkB,kBA7D/B,SAACS,GAC1B,IAAMV,EAAO6B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDmC,EACU5B,EAAIoC,GACXhC,MAAK,SAAAiC,GACJjB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKU,KAAOA,EAAKV,EAAO+C,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJpC,EAAKI,QADD,sCAGf8C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEnC,KAAOA,SA6CsByC,CAAmBnD,EAAKU,WAGpF,0BAAM0C,SApCM,SAACC,GAEfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS2B,EACTpB,MAAM,IAAI6C,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3BjD,GAAImB,EAAM+B,OAAS,GAGrBtB,EACUiB,GACPzC,MAAK,SAAAiC,GACJjB,EAASD,EAAMZ,OAAO8B,IACtBf,EAAW,SAuBX,2BAAO6B,MAAO9B,EAAS+B,SAjBJ,SAACT,GACxBrB,EAAWqB,EAAMU,OAAOF,UAiBpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,QC1FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c3f9c06f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }  \n  return axios.get(baseUrl).then(response => response.data.concat(nonExisting));\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject).then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data);\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteServices from './services/notes'\nimport './index.css'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div> \n  )\n}\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteServices\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  }\n\n  useEffect(() => {\n    noteServices\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes);\n      })\n  }, []);\n\n  const addNote = (event) => \n  {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n    \n    noteServices\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote('');\n      })\n  }\n  \n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={()=> setShowAll(!showAll)}>show {showAll ? 'important' : 'all'}</button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}